name: Build and Publish Multi-Architecture Docker Image

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_HUB_REPOSITORY: arvindand/maven-tools-mcp

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Make mvnw executable
      run: chmod +x ./mvnw

    - name: Build with Maven
      run: ./mvnw clean package -DskipTests

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build AMD64 native image
      run: |
        PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "1.1.1")
        
        # Build AMD64 native image and save as tar
        ./mvnw -Pnative spring-boot:build-image \
          -Dspring-boot.build-image.imageName=temp-amd64:latest \
          -Dspring-boot.build-image.env.BP_NATIVE_IMAGE_BUILD_ARGUMENTS="--no-fallback"
        
        # Save the image as a tar file
        docker save temp-amd64:latest > amd64-image.tar

    - name: Set up QEMU for ARM64 emulation
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - name: Build ARM64 native image
      run: |
        PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "1.1.1")
        
        # Build ARM64 native image with platform specification
        ./mvnw -Pnative spring-boot:build-image \
          -Dspring-boot.build-image.imageName=temp-arm64:latest \
          -Dspring-boot.build-image.env.BP_NATIVE_IMAGE_BUILD_ARGUMENTS="--no-fallback" \
          -Dspring-boot.build-image.builder=paketobuildpacks/builder-jammy-buildpack-deps:0.4.10
        
        # Save the image as a tar file
        docker save temp-arm64:latest > arm64-image.tar

    - name: Create and push multi-architecture manifest
      run: |
        PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo "1.1.1")
        
        # Load images and tag them for pushing
        docker load < amd64-image.tar
        docker load < arm64-image.tar
        
        # Tag and push AMD64 image
        docker tag temp-amd64:latest arvindand/maven-tools-mcp:${PROJECT_VERSION}-amd64
        docker tag temp-amd64:latest arvindand/maven-tools-mcp:amd64
        docker push arvindand/maven-tools-mcp:${PROJECT_VERSION}-amd64
        docker push arvindand/maven-tools-mcp:amd64
        
        # Tag and push ARM64 image
        docker tag temp-arm64:latest arvindand/maven-tools-mcp:${PROJECT_VERSION}-arm64
        docker tag temp-arm64:latest arvindand/maven-tools-mcp:arm64
        docker push arvindand/maven-tools-mcp:${PROJECT_VERSION}-arm64
        docker push arvindand/maven-tools-mcp:arm64
        
        # Create multi-architecture manifest for version tag
        docker manifest create arvindand/maven-tools-mcp:${PROJECT_VERSION} \
          --amend arvindand/maven-tools-mcp:${PROJECT_VERSION}-amd64 \
          --amend arvindand/maven-tools-mcp:${PROJECT_VERSION}-arm64
        docker manifest push arvindand/maven-tools-mcp:${PROJECT_VERSION}
        
        # Create multi-architecture manifest for latest tag
        docker manifest create arvindand/maven-tools-mcp:latest \
          --amend arvindand/maven-tools-mcp:${PROJECT_VERSION}-amd64 \
          --amend arvindand/maven-tools-mcp:${PROJECT_VERSION}-arm64
        docker manifest push arvindand/maven-tools-mcp:latest

  test-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Java 24
      uses: actions/setup-java@v4
      with:
        java-version: '24'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Make mvnw executable
      run: chmod +x ./mvnw

    - name: Build and test PR
      run: |
        ./mvnw clean package -DskipTests
        ./mvnw -Pnative spring-boot:build-image \
          -Dspring-boot.build-image.imageName=maven-tools-mcp:pr-${{ github.event.number }}
        
        # Test the image
        timeout 30s docker run --rm -e SPRING_PROFILES_ACTIVE=docker maven-tools-mcp:pr-${{ github.event.number }} --help || true